{"version":3,"sources":["sw.js"],"names":["APP_PREFIX","VERSION","CACHE_NAME","URLS","self","addEventListener","e","console","log","request","url","respondWith","caches","match","then","fetch","waitUntil","open","cache","addAll","keys","keyList","cacheWhitelist","filter","key","indexOf","Promise","push","all","map","i","delete"],"mappings":";AAAA,IAAIA,EAAa,mBACbC,EAAU,aACVC,EAAaF,EAAaC,EAC1BE,EAAO,CACP,UACA,oBACA,0BAKJC,KAAKC,iBAAiB,QAAS,SAAUC,GACrCC,QAAQC,IAAI,mBAAqBF,EAAEG,QAAQC,KAC3CJ,EAAEK,YACEC,OAAOC,MAAMP,EAAEG,SAASK,KAAK,SAAUL,GAC/BA,OAAAA,GACAF,QAAQC,IAAI,2BAA6BF,EAAEG,QAAQC,KAC5CD,IAEPF,QAAQC,IAAI,kCAAoCF,EAAEG,QAAQC,KACnDK,MAAMT,EAAEG,eAU/BL,KAAKC,iBAAiB,UAAW,SAAUC,GACvCA,EAAEU,UACEJ,OAAOK,KAAKf,GAAYY,KAAK,SAAUI,GAE5BA,OADPX,QAAQC,IAAI,sBAAwBN,GAC7BgB,EAAMC,OAAOhB,QAMhCC,KAAKC,iBAAiB,WAAY,SAAUC,GACxCA,EAAEU,UACEJ,OAAOQ,OAAON,KAAK,SAAUO,GAGrBC,IAAAA,EAAiBD,EAAQE,OAAO,SAAUC,GACnCA,OAAAA,EAAIC,QAAQzB,KAKhB0B,OAFPJ,EAAeK,KAAKzB,GAEbwB,QAAQE,IAAIP,EAAQQ,IAAI,SAAUL,EAAKM,GACtCR,IAAiC,IAAjCA,EAAeG,QAAQD,GAEhBZ,OADPL,QAAQC,IAAI,oBAAsBa,EAAQS,IACnClB,OAAOmB,OAAOV,EAAQS","file":"sw.js","sourceRoot":"..","sourcesContent":["var APP_PREFIX = 'ApplicationName_'     // Identifier for this app (this needs to be consistent across every cache update)\nvar VERSION = 'version_01'              // Version of the off-line cache (change this value everytime you want to update cache)\nvar CACHE_NAME = APP_PREFIX + VERSION\nvar URLS = [                            // Add URL you want to cache in this list.\n    '/angel/',                     // If you have separate JS/CSS files,\n    '/angel/index.html',            // add path to those files here\n    '/angel/App.f684dadd.js'\n\n]\n\n// Respond with cached resources\nself.addEventListener('fetch', function (e) {\n    console.log('fetch request : ' + e.request.url)\n    e.respondWith(\n        caches.match(e.request).then(function (request) {\n            if (request) { // if cache is available, respond with cache\n                console.log('responding with cache : ' + e.request.url)\n                return request\n            } else {       // if there are no cache, try fetching request\n                console.log('file is not cached, fetching : ' + e.request.url)\n                return fetch(e.request)\n            }\n\n            // You can omit if/else for console.log & put one line below like this too.\n            // return request || fetch(e.request)\n        })\n    )\n})\n\n// Cache resources\nself.addEventListener('install', function (e) {\n    e.waitUntil(\n        caches.open(CACHE_NAME).then(function (cache) {\n            console.log('installing cache : ' + CACHE_NAME)\n            return cache.addAll(URLS)\n        })\n    )\n})\n\n// Delete outdated caches\nself.addEventListener('activate', function (e) {\n    e.waitUntil(\n        caches.keys().then(function (keyList) {\n            // `keyList` contains all cache names under your username.github.io\n            // filter out ones that has this app prefix to create white list\n            var cacheWhitelist = keyList.filter(function (key) {\n                return key.indexOf(APP_PREFIX)\n            })\n            // add current cache name to white list\n            cacheWhitelist.push(CACHE_NAME)\n\n            return Promise.all(keyList.map(function (key, i) {\n                if (cacheWhitelist.indexOf(key) === -1) {\n                    console.log('deleting cache : ' + keyList[i] )\n                    return caches.delete(keyList[i])\n                }\n            }))\n        })\n    )\n})\n"]}