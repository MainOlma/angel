{"version":3,"sources":["src/sw.js"],"names":["doCache","CACHE_NAME","self","addEventListener","event","cacheWhitelist","waitUntil","caches","keys","then","keyList","Promise","all","map","key","includes","console","log","delete","open","cache","fetch","response","json","assets","urlsToCache","addAll","respondWith","match","request"],"mappings":";AACA,IAAIA,GAAU,EAGVC,EAAa,kBAGjBC,KAAKC,iBAAiB,WAAY,SAAAC,GACxBC,IAAAA,EAAiB,CAACJ,GACxBG,EAAME,UACFC,OAAOC,OACFC,KAAK,SAAAC,GACFC,OAAAA,QAAQC,IAAIF,EAAQG,IAAI,SAAAC,GAChB,IAACT,EAAeU,SAASD,GAElBP,OADPS,QAAQC,IAAI,mBAAqBH,GAC1BP,OAAOW,OAAOJ,WAQ7CZ,KAAKC,iBAAiB,UAAW,SAASC,GAClCJ,GACAI,EAAME,UACFC,OAAOY,KAAKlB,GACPQ,KAAK,SAASW,GAGXC,MAAM,uBACDZ,KAAK,SAAAa,GACFA,EAASC,SAEZd,KAAK,SAAAe,GAIIC,IAAAA,EAAc,CAChB,IACAD,EAAO,YAEXJ,EAAMM,OAAOD,GACbT,QAAQC,IAAI,iBASxCf,KAAKC,iBAAiB,QAAS,SAASC,GAChCJ,GACAI,EAAMuB,YACFpB,OAAOqB,MAAMxB,EAAMyB,SAASpB,KAAK,SAASa,GAC/BA,OAAAA,GAAYD,MAAMjB,EAAMyB","file":"sw.js","sourceRoot":"..","sourcesContent":["// Set this to true for production\nvar doCache = false;\n\n// Name our cache\nvar CACHE_NAME = 'my-pwa-cache-v1';\n\n// Delete old caches that are not our current one!\nself.addEventListener(\"activate\", event => {\n    const cacheWhitelist = [CACHE_NAME];\n    event.waitUntil(\n        caches.keys()\n            .then(keyList =>\n                Promise.all(keyList.map(key => {\n                    if (!cacheWhitelist.includes(key)) {\n                        console.log('Deleting cache: ' + key)\n                        return caches.delete(key);\n                    }\n                }))\n            )\n    );\n});\n\n// The first time the user starts up the PWA, 'install' is triggered.\nself.addEventListener('install', function(event) {\n    if (doCache) {\n        event.waitUntil(\n            caches.open(CACHE_NAME)\n                .then(function(cache) {\n                    // Get the assets manifest so we can see what our js file is named\n                    // This is because webpack hashes it\n                    fetch(\"asset-manifest.json\")\n                        .then(response => {\n                            response.json()\n                        })\n                        .then(assets => {\n                            // Open a cache and cache our files\n                            // We want to cache the page and the main.js generated by webpack\n                            // We could also cache any static assets like CSS or images\n                            const urlsToCache = [\n                                \"/\",\n                                assets[\"main.js\"]\n                            ]\n                            cache.addAll(urlsToCache)\n                            console.log('cached');\n                        })\n                })\n        );\n    }\n});\n\n// When the webpage goes to fetch files, we intercept that request and serve up the matching files\n// if we have them\nself.addEventListener('fetch', function(event) {\n    if (doCache) {\n        event.respondWith(\n            caches.match(event.request).then(function(response) {\n                return response || fetch(event.request);\n            })\n        );\n    }\n});\n"]}